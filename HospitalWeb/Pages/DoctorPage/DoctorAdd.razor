@page "/adddoctor"
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@inject HttpClient Http

@if (departmentList != null)
{
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 border">
            <EditForm Model="@doctorRequest" OnValidSubmit="Create" FormName="WorkerForm">
                <DataAnnotationsValidator />
                <div class="mb-3 text-center flex-column">
                    <h3>Регистрация врача</h3>
                </div>
                <div class="mb-3">
                    <label>Имя</label>
                    <InputText @bind-Value="doctorRequest.FirstName" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.FirstName" />
                </div>
                <div class="mb-3">
                    <label>Фамилия</label>
                    <InputText @bind-Value="doctorRequest.LastName" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.LastName" />
                </div>
                <div class="mb-3">
                    <label>Адресс</label>
                    <InputText @bind-Value="doctorRequest.Address" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.Address" />
                </div>
                <div class="mb-3">
                    <label>Номер телфон</label>
                    <InputText @bind-Value="doctorRequest.PhoneNumber" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.PhoneNumber" />
                </div>
                <div class="mb-3">
                    <label>Позиция</label>
                    <InputText @bind-Value="doctorRequest.Position" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.Position" />
                </div>
                <div class="mb-3">
                    <label>Выбрайте image</label>
                    <InputFile OnChange="HandleFileSelected" class="form-control" />
                </div>
                <div class="mb-3">
                    <label>Информация</label>
                    <InputText @bind-Value="doctorRequest.Information" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.Information" />
                </div>
                <div class="mb-3">
                    <label>Отделение</label>
                    <select @bind="doctorRequest.DepartmentId" class="form-control">
                        @foreach (var pos in departmentList)
                        {
                            <option value="@pos.Id">@pos.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label>Дата рождения</label>
                    <input type="datetime-local" @bind="doctorRequest.DateOfBirth" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.DateOfBirth" />
                </div>
                <div class="mb-3">
                    <label>Дата регистрации</label>
                    <input type="datetime-local" @bind="doctorRequest.DateRegister" class="form-control" />
                    <ValidationMessage For="() => doctorRequest.DateRegister" />
                </div>
                <div class="mb-3 d-grid gap-2">
                    <button type="submit" class="btn btn-outline-success">Сохранить</button>
                    <button type="button" @onclick="Back" class="btn btn-primary">Назад</button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private IEnumerable<DepartmentResponse>? departmentList;
    private string authToken;
    private DoctorRequest doctorRequest = new DoctorRequest();
    private IBrowserFile? selectedFile;
    private const long maxFileSize = 10242880; // 10 MB

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authToken = await _authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                departmentList = await _httpClient.GetFromJsonAsync<List<DepartmentResponse>>("api/Department");
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task Create()
    {
        try
        {
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(doctorRequest.FirstName), nameof(doctorRequest.FirstName));
            content.Add(new StringContent(doctorRequest.LastName), nameof(doctorRequest.LastName));
            content.Add(new StringContent(doctorRequest.PhoneNumber), nameof(doctorRequest.PhoneNumber));
            content.Add(new StringContent(doctorRequest.Address), nameof(doctorRequest.Address));
            content.Add(new StringContent(doctorRequest.Information), nameof(doctorRequest.Information));
            content.Add(new StringContent(doctorRequest.Position), nameof(doctorRequest.Position));
            content.Add(new StringContent(doctorRequest.DepartmentId.ToString()), nameof(doctorRequest.DepartmentId));
            content.Add(new StringContent(doctorRequest.DateOfBirth?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") ?? string.Empty), nameof(doctorRequest.DateOfBirth));
            content.Add(new StringContent(doctorRequest.DateRegister?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ") ?? string.Empty), nameof(doctorRequest.DateRegister));

            if (selectedFile != null)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxFileSize));
                fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
                content.Add(fileContent, nameof(doctorRequest.Image), selectedFile.Name);
            }

            authToken = await _authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                var response = await _httpClient.PostAsync("api/Doctor", content);

                if (response.IsSuccessStatusCode)
                {
                    await _js.InvokeVoidAsync("alert", "Successfully saved your data");
                    doctorRequest = new DoctorRequest();
                    selectedFile = null;
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    await _js.InvokeVoidAsync("alert", $"Error: {errorMessage}");
                }
            }
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Exception: {ex.Message}");
        }
    }

    private void Back()
    {
        _navigationManager.NavigateTo("/doctor");
    }
}
