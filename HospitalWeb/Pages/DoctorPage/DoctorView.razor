@page "/doctor"
<PageTitle>Doctors List</PageTitle>
<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="Create">Добавить</MudButton>
<br />
<br />
@if (doctors != null)
{
    <div class="text-center">
        <h4>Список докторов</h4>
    </div>
    <MudDataGrid T="DoctorResponse" Items="@doctors" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
        <Columns>
            <TemplateColumn>
                <HeaderTemplate>
                    <MudText Class="text-center">Номер</MudText>
                </HeaderTemplate>
                <CellTemplate Context="context">
                    <MudText>@((doctors.ToList().IndexOf(context.Item) + 1).ToString())</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.FirstName" Title="Имя" Class="text-center" />
            <PropertyColumn Property="x => x.LastName" Title="Фамилия" Class="text-center" />
            <PropertyColumn Property="x => x.Address" Title="Адресс" Class="text-center" />
            <PropertyColumn Property="x => x.PhoneNumber" Title="Номер тел" Class="text-center" />
            <PropertyColumn Property="x => x.Position" Title="Позиция" Class="text-center" />
            <PropertyColumn Property="x => x.DateOfBirth" Title="Дата рождения" Class="text-center" />
            <PropertyColumn Property="x => x.DateRegister" Title="Дата регистрации" Class="text-center" />

            <!-- Image Column -->
            <TemplateColumn>
                <HeaderTemplate>
                    <MudText Class="text-center">Изображение</MudText>
                </HeaderTemplate>
                <CellTemplate Context="context">
                    @if (!string.IsNullOrEmpty(context.Item.Image))
                    {
                        <MudImage Src="@context.Item.Image" Alt="Doctor Image" Width="100" Height="100" />
                    }
                    else
                    {
                        <MudText>No Image</MudText>
                    }
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end" Title="Редак. /Удалить" Class="text-center">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => ConfirmDelete(context.Item.Id)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="DoctorResponse" />
        </PagerContent>
    </MudDataGrid>

    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
    </div>
}
@code {
    private List<DoctorResponse> doctors;
    private bool isLoading = true;
    private string authToken;

    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authToken = await _authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                doctors = await _httpClient.GetFromJsonAsync<List<DoctorResponse>>("api/Doctor");
            }
        }
        catch (Exception ex)
        {
            // Handle exception (e.g., log or show an error message)
        }
        finally
        {
            isLoading = false;
        }
    }
    protected void Create()
    {
        _navigationManager.NavigateTo("/adddoctor");
    }

    private async Task ConfirmDelete(Guid id)
    {
        var parameters = new DialogParameters
            {
                ["Message"] = "Вы уверены, что хотите удалить"
            };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmDialog>("Подтверждение", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(id);
        }
    }
    protected async Task Delete(Guid id)
    {
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
        await _httpClient.DeleteAsync($"api/Doctor?id={id}");
        doctors = await _httpClient.GetFromJsonAsync<List<DoctorResponse>>("api/Doctor");
    }

    // events
    void StartedEditingItem(DoctorResponse item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(DoctorResponse item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    void CommittedItemChanges(DoctorResponse item)
    {
        var updateRequest = new DoctorUpdateRequest
            {
                Id = item.Id,
                FirstName = item.FirstName,
                LastName = item.LastName,
                Address = item.Address,
                DateOfBirth = item.DateOfBirth,
                PhoneNumber = item.PhoneNumber,
                Position = item.Position,
            };

        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
        _httpClient.PutAsJsonAsync<DoctorUpdateRequest>("api/Doctor", updateRequest);
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}

