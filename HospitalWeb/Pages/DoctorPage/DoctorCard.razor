@page "/doctorCard"
<MudGrid>
    @if (doctors != null)
    {
        @foreach (var doctor in doctors)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <div class="mud-card-media" style="background-image: url('@GetImageUrl(doctor.Image)'); height: 450px;"></div>
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@doctor.FirstName @doctor.LastName</MudText>
                        <MudText Typo="Typo.body1">Телефон: @doctor.PhoneNumber</MudText>
                        <MudText Typo="Typo.body1">Позиция: @doctor.Position</MudText>
                        @if (IsInformationExpanded(doctor.Id))
                        {
                            <MudText Typo="Typo.body1">Информация: @doctor.Information</MudText>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ToggleInformation(doctor.Id)">Show Less</MudButton>
                        }
                        else
                        {
                            <MudText Typo="Typo.body1">Информация: @doctor.Information.Substring(0, Math.Min(50, doctor.Information.Length))...</MudText>
                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ToggleInformation(doctor.Id)">Show More</MudButton>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    }
    else
    {
        <MudText>Loading...</MudText>
    }
</MudGrid>

@code {
    private List<DoctorResponse> doctors;
    private string authToken;
    private Dictionary<Guid, bool> informationExpandedState = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authToken = await _authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                doctors = await _httpClient.GetFromJsonAsync<List<DoctorResponse>>("api/Doctor");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private string GetImageUrl(string imageFileName)
    {
        if (string.IsNullOrEmpty(imageFileName))
        {
            return "default_image_url"; // Replace with a default image URL or an empty string
        }
        return imageFileName.Trim('\''); // Trim single quotes from the image URL if they exist
    }

    private bool IsInformationExpanded(Guid doctorId)
    {
        if (informationExpandedState.ContainsKey(doctorId))
        {
            return informationExpandedState[doctorId];
        }
        return false;
    }

    private void ToggleInformation(Guid doctorId)
    {
        if (informationExpandedState.ContainsKey(doctorId))
        {
            informationExpandedState[doctorId] = !informationExpandedState[doctorId];
        }
        else
        {
            informationExpandedState[doctorId] = true;
        }
    }
}
