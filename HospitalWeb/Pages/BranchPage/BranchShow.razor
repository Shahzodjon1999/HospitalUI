@page "/branch"
<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="Create">Добавить</MudButton>
<br />
<br />
@if (branchs != null)
{
    <MudDataGrid T="BranchResponse" Items="@branchs" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
        <Columns>
            <TemplateColumn>
                <HeaderTemplate>
                    <MudText>Номер</MudText>
                </HeaderTemplate>
                <CellTemplate Context="context">
                    <MudText>@((branchs.ToList().IndexOf(context.Item) + 1).ToString())</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" Title="Название" />
            <PropertyColumn Property="x => x.Location" Title="Адресс" />
            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async () => await Delete(context.Item.Id))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="WorkerResponse" />
        </PagerContent>
    </MudDataGrid>
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Только чтение</MudSwitch>
    </div>
}

@code {
    [Inject]
    private CustomAuthenticationStateProvider authenticationStateProvider { get; set; }

    private string authToken;

    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    private WorkerRequest floorRequest = new();

    private IEnumerable<BranchResponse> branchs;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authToken = await authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                branchs = await _httpClient.GetFromJsonAsync<List<BranchResponse>>("api/Branch");
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private void Create()
    {
        _navigationManager.NavigateTo("/addbranch");
    }

    protected async Task Delete(Guid id)
    {
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
        await _httpClient.DeleteAsync($"api/Branch?id={id}");
        branchs = await _httpClient.GetFromJsonAsync<List<BranchResponse>>("api/Branch");
    }

    // events
    void StartedEditingItem(BranchResponse item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(BranchResponse item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    void CommittedItemChanges(BranchResponse item)
    {
        var updateRequest = new BranchUpdateRequest
            {
                Id = item.Id,
                Location=item.Location,
                Name=item.Name
            };
        try
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
            _httpClient.PutAsJsonAsync<BranchUpdateRequest>("api/Branch", updateRequest);
            _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        }
        catch (Exception)
        {
            
            throw;
        }
       
    }
}
