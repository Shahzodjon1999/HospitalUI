@page "/pateintinfo"
@if (patientInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudDataGrid T="PatientInfoResponse" MultiSelection="true" Items="@patientInfo" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                 Hideable="true" >
        <ToolBarContent>
            <MudText Typo="Typo.h6">Список пациентов</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <SelectColumn T="PatientInfoResponse" />
            <PropertyColumn Property="x => x.FullName" Title="Имя и Отчество"/>
            <PropertyColumn Property="x => x.RoomNumber" Title="Номер комнату" SortBy="@_sortBy" />
            <PropertyColumn Property="x => x.FloorNumber" Title="Номер этаж"/>
            <PropertyColumn Property="x => x.DepartmentName" Title="Названия Отделения" />
            <PropertyColumn Property="x => x.BranchName" Title="Названия филияли" />
            <PropertyColumn Property="x => x.HospitalName" Title="Названия болница" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PatientInfoResponse" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private string authToken;
    private IEnumerable<PatientInfoResponse>? patientInfo = new List<PatientInfoResponse>();
    private string _searchString;
    private bool _sortNameByLength;
    private Func<PatientInfoResponse, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.RoomNumber;
        else
            return x.RoomNumber;
    };
    private Func<PatientInfoResponse, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.DepartmentName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Id} {x.RoomNumber} {x.FloorNumber}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        authToken = await _authenticationStateProvider.GetToken();
        if (authToken != null)
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
          patientInfo = await _httpClient.GetFromJsonAsync<List<PatientInfoResponse>>("api/Patient/PatientInfo");
        }
    }
}