@page "/addposition"
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 border">
        <EditForm Model="@positionRequest" OnValidSubmit="Create" FormName="PositionForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <h3>Регистрация должносты</h3>
            </div>
            <div class="mb-3">
                <label>Название</label>
                <InputText @bind-Value="positionRequest.Name" class="form-control" />
                <ValidationMessage For="() => positionRequest.Name" />
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-outline-success">Сохранить</button>
                <button type="button" @onclick="Back" class="btn btn-primary">Назад</button>
            </div>
        </EditForm>
    </div>
</div>
@code {
    [Inject]
    private CustomAuthenticationStateProvider? authenticationStateProvider { get; set; }

    private string? authToken;
    private PositionRequest? positionRequest = new PositionRequest();

    protected async Task Create()
    {
        try
        {
            authToken = await authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                var response = await _httpClient.PostAsJsonAsync<PositionRequest>("api/Position", positionRequest);
                if (response.IsSuccessStatusCode)
                {
                    await _js.InvokeVoidAsync("alert", "Seccessfull save your data");
                    positionRequest = new PositionRequest();
                }
                else
                {
                    await _js.InvokeVoidAsync("alert", "Ошибка");
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    private void Back()
    {
        _navigationManager.NavigateTo("/position");
    }
}
