@page "/appointment"
<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="Create">Записаться к варачу</MudButton>
<br />
<br />
@if (appointments != null)
{
     <div class="text-center">
        <h4>Список записей</h4>
    </div>
    <MudDataGrid T="AppointmentResponse" Items="@appointments" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
                 StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
                 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
        <Columns>
            <TemplateColumn>
                <HeaderTemplate>
                    <MudText Class="text-center">Номер</MudText>
                </HeaderTemplate>
                <CellTemplate Context="context">
                    <MudText>@((appointments.ToList().IndexOf(context.Item) + 1).ToString())</MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" Title="Имя" Class="text-center" />
            <PropertyColumn Property="x => x.lastName" Title="Фамилия" Class="text-center" />
            <PropertyColumn Property="x => x.Email" Title="Email" Class="text-center" />
            <PropertyColumn Property="x => x.PhoneNumber" Title="Номер тел" Class="text-center" />
            <PropertyColumn Property="x => x.AppointmentDate" Title="Дата и время" Class="text-center" />
            <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end" Title="Редак. /Удалить" Class="text-center">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => ConfirmDelete(context.Item.Id)" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="AppointmentResponse" />
        </PagerContent>
    </MudDataGrid>
    <div class="d-flex flex-wrap mt-4">
        <MudSwitch @bind-Checked="@_readOnly" Color="Color.Primary">Read Only</MudSwitch>
    </div>
}

@code {
    private string authToken;
    private bool _readOnly;
    private bool _isCellEditMode;
    private bool _editTriggerRowClick;

    private AppointmentRequest appointmentRequest = new();

    private IEnumerable<AppointmentResponse> appointments;

    private List<string> _events = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            authToken = await _authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                appointments = await _httpClient.GetFromJsonAsync<List<AppointmentResponse>>("api/Appointment");
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    protected void Create()
    {
        _navigationManager.NavigateTo("/addappointment");
    }

    private async Task ConfirmDelete(Guid id)
    {
        var parameters = new DialogParameters
            {
                ["Message"] = "Вы уверены, что хотите удалить"
            };

        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmDialog>("Подтверждение", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await Delete(id);
        }
    }

    protected async Task Delete(Guid id)
    {
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
        await _httpClient.DeleteAsync($"api/Appointment?id={id}");
        appointments = await _httpClient.GetFromJsonAsync<List<AppointmentResponse>>("api/Appointment");
    }

    // events
    void StartedEditingItem(AppointmentResponse item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(AppointmentResponse item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(AppointmentResponse item)
    {
        var updateRequest = new AppointmentUpdateRequest
            {
                Id = item.Id,
                Name = item.Name,
                AppointmentDate = item.AppointmentDate,
                Email = item.Email,
                PhoneNumber = item.PhoneNumber,
                lastName = item.lastName,
            };

        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
        _httpClient.PutAsJsonAsync<AppointmentUpdateRequest>("api/Appointment", updateRequest);
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
}
