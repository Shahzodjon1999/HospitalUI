@page "/appointmentregister"
@using Microsoft.AspNetCore.Components.Forms
@if (doctorList != null)
{
    <div class="row">
        <div class="col-lg-4 offset-lg-4 pt-4 border">
            <EditForm Model="@appointmentRequest" OnValidSubmit="Create" FormName="PositionForm">
                <DataAnnotationsValidator />
                <div class="mb-3 text-center flex-column">
                    <h3>Регистрация встреча</h3>
                </div>
                <div class="mb-3">
                    <label>Имя</label>
                    <InputText @bind-Value="appointmentRequest.Name" class="form-control" />
                    <ValidationMessage For="() => appointmentRequest.Name" />
                </div>
                <div class="mb-3">
                    <label>Фамилия</label>
                    <InputText @bind-Value="appointmentRequest.lastName" class="form-control" />
                    <ValidationMessage For="() => appointmentRequest.lastName" />
                </div>
                <div class="mb-3">
                    <label>Email</label>
                    <InputText @bind-Value="appointmentRequest.Email" class="form-control" />
                    <ValidationMessage For="() => appointmentRequest.Email" />
                </div>
                <div class="mb-3">
                    <label>Номар телефон</label>
                    <InputText @bind-Value="appointmentRequest.PhoneNumber" class="form-control" />
                    <ValidationMessage For="() => appointmentRequest.Email" />
                </div>
                <div class="mb-3">
                    <label>Врач</label>
                    <select @bind="appointmentRequest.DoctorId" class="form-control">
                        @foreach (var pos in doctorList)
                        {
                            <option value="@pos.Id">@pos.FirstName @pos.LastName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label>Дата и время регистрации</label>
                    <input type="datetime-local" @bind="appointmentRequest.AppointmentDate" class="form-control" />
                    <ValidationMessage For="() => appointmentRequest.AppointmentDate" />
                </div>
                <div class="mb-3 d-grid gap-2">
                    <button type="submit" class="btn btn-outline-success">Сохранить</button>
                </div>
            </EditForm>
        </div>
    </div>
}
@code {
    private string? authToken;
    private AppointmentRequest appointmentRequest = new AppointmentRequest();

    private IEnumerable<DoctorResponse>? doctorList;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            authToken = await _authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
                doctorList = await _httpClient.GetFromJsonAsync<List<DoctorResponse>>("api/Doctor");
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
    protected async Task Create()
    {
        try
        {
            authToken = await _authenticationStateProvider.GetToken();
            if (authToken != null)
            {
                _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);

                // Check if the appointment already existsdoctorRequest.DateRegister?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
                var checkResponse = await _httpClient.GetAsync($"api/Appointment/check-appointment?doctorId={appointmentRequest.DoctorId}&appointmentDate={appointmentRequest.AppointmentDate?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")}");
                var appointmentExists = await checkResponse.Content.ReadFromJsonAsync<bool>();

                if (appointmentExists)
                {
                    await _js.InvokeVoidAsync("alert", "Этот врач уже занят на указанное время.");
                }
                else
                {
                    // Proceed with saving the appointment
                    var response = await _httpClient.PostAsJsonAsync("api/Appointment", appointmentRequest);
                    if (response.IsSuccessStatusCode)
                    {
                        await _js.InvokeVoidAsync("alert", "Данные успешно сохранены.");
                        appointmentRequest = new AppointmentRequest();
                    }
                    else
                    {
                        await _js.InvokeVoidAsync("alert", "Ошибка при сохранении данных.");
                    }
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
}
